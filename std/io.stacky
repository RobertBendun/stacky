"posix"  import
"limits" import

nl fun
	'\n' top 1 swap stdout SYS_write syscall3 drop drop
end

print fun
	dup
	dup while dup load8 0 != do 1 + end swap - # strlen
	swap stdout SYS_write syscall3 drop # Print string
end

println fun
	print
	nl
end

digits10 fun
	1 while 1 do
		swap
		dup 10 <    if drop     return end
		dup 100 <   if drop 1 + return end
		dup 1000 <  if drop 2 + return end
		dup 10000 < if drop 3 + return end
			10000 div swap 4 +
	end
end

Print_Buffer Max_Digits10 []byte

print-int fun # ( i64 -- )
	dup digits10 tuck 1 - swap
	while dup 10 >= do
		over swap
		10 divmod
		swap rot
		Print_Buffer + swap '0' + store8
		swap 1 -
		swap
	end
	'0' + Print_Buffer swap store8
	drop
	Print_Buffer stdout SYS_write syscall3 drop
end

. fun
	print-int
	nl
end
