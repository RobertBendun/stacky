"posix"  import
"limits" import

nl fun is
	'\n' top 1 swap stdout SYS_write syscall3 drop drop
end

space fun is
	' ' top 1 swap stdout SYS_write syscall3 drop drop
end

puts fun ptr -- is
	dup
	dup while dup load8 0 != do 1 + end swap - # strlen
	swap stdout SYS_write syscall3 drop # Print string
end

digits10 fun u64 -- u64 is
	1 while true do
		swap
		dup 10 <    if drop     return end
		dup 100 <   if drop 1 + return end
		dup 1000 <  if drop 2 + return end
		dup 10000 < if drop 3 + return end
			10000 div swap 4 +
	end drop
end

Print_Buffer Max_Digits10 []byte

putu fun u64 -- is
	dup digits10 tuck 1 - swap
	while dup 10 >= do
		over swap
		10 divmod
		swap rot
		Print_Buffer + swap '0' + store8
		swap 1 -
		swap
	end
	'0' + Print_Buffer swap store8
	drop
	Print_Buffer stdout SYS_write syscall3 drop
end

# print int aligned to n characters to the right by ' '
aputu fun u64 u64 -- is
	over digits10
	2dup > if
		- while dup 0 > do
			space
			1 -
		end drop
	else
		2drop
	end
	putu
end

. fun u64 -- is putu nl end
